#!/usr/bin/env python
"""
   jb:    A simple command-line interface for managing
          multiple project to-do lists, creating note-histories
          for tasks done, and piecing together a daily task list
          from the "job jar" of todos still waiting to
          be completed.

          The system explicitly rejects the notion of due-dates,
          dependencies, sub-tasks etc., since these are already
          well covered by other tools.

   Flags: A task can have any combination of three status flags.
          Flags occur in any order at the start of the task label.
          * marks a task as started or in-progress
          ! marks a task as being picked for work today
          ~ marks a project or task as sleeping

          Sleeping projects and tasks are excluded from reports
          unless the -a option is present.

   ID values:
          Each job is given an id based on the MD5 hash of its text,
          so that log records and notes can be associated with it,
          but nobody has time to type in a 30-character string just to
          mark a job complete. So in practice, only the last 2 digits
          of the id string are shown. This is usually fine, but on 
          rare occasions, two jobs may have the same final digits. If
          this happens, just relist the jobs using the "-i" option to 
          increase the number of digits shown in the id values.

   Usage: 
      jb [options] stats
      jb [options] projects
      jb [options] add PROJ [JOBSTRING...]
      jb [options] (list|picked|today|sleeping|started) [PROJ]
      jb [options] (pick|unpick|start|finish) PROJ JOBID...
      jb [options] delete PROJ [JOBID]
      jb [options] log PROJ JOBID MESSAGE...
      jb [options] sleep PROJ [JOBID...]
      jb [options] wake PROJ [JOBID...]
      jb -h | --help
      jb -V | --version

   Options:
      -d      # Dump modified data file to STDOUT rather than writing to file
      -a      # Report ALL projects/tasks, including ~-sleeping ones
      -D PATH # Look in directory at PATH for .job.jb and .log.jb files
      -i N    # Show N digits of the job id (defuault = 2)
      -w DT   # Use DT instead of today in the logs for current operation
      -y      # Required extra confirmation for extreme commands like 'delete'
      -v      # Display verbose output
      -V      # Display version information

   Created 2018 by Jefferson Smith <jefferson@smithicus.com>
   Check out my tools, videos, and novels at http://creativityhacker.ca
"""

import os
import re
import hashlib
import datetime
from docopt import docopt


# process command line args
args = docopt(__doc__, version='jb version 0.0.1')
#print args

def mention(outstr):
    if args['-v']:
        print outstr

# by default, use the data files from the user's home directory
todo_file = os.path.expanduser("~/.jobs.jb")
log_file = os.path.expanduser("~/.log.jb")

# if they exist, use data files found in the current directory
if os.getcwd() != os.path.expanduser("~"):
    if os.path.exists(".jobs.jb"):
        todo_file = ".jobs.jb"
        print "Using job data file in current directory."
    if os.path.exists(".log.jb"):
        log_file = ".log.jb"

# if the user explicitly specifies an override, use the provided files
if '-D' in args and args['-D']:
   todo_file = os.path.join(args['-D'], '.jobs.jb')
   log_file = os.path.join(args['-D'], '.log.jb')

# if an override log date is provided, make sure it's in proper form
if args['-w'] and not re.match("\d\d\d\d-\d\d-\d\d", args['-w']):
    print "Date provided in -w option must be in the form YYYY-MM-DD"
    exit()

idlen = 2
projects = []
datachanged = False

if args['-i']:
    idlen = int(args['-i'])

mention("Todo file: %s" % todo_file)
mention("Log file: %s" % log_file)

"""
Format of log file:
YYYY-MM-DD PROJ JOBID Message...
"""

def WriteLog(logfile, projtag, jobid, msg):
    with open(logfile, 'a') as fh:
        if args['-w']:
                dt = args['-w']
        else:
            dt = datetime.datetime.now().strftime("%Y-%m-%d")
        fh.write("%s %s %s %s\n" % (dt, projtag, jobid, msg))

def breakline(line, width):
    head = ''
    tail = ''
    for i in range(width, 0, -1):
        if line[i] == ' ':
            head = line[:i]
            tail = line[i+1:]
            return head, tail
    head = "%s..." % line[:width-3]
    tail = ''
    return head, tail
    

def print_multi(linelist, columnwide, wrapindent=4):
    # first step, remake the list as width-limited single column
    newlines = []
    for l in linelist:
        if len(l) <= columnwide:
            newlines.append(l)
        else:
            head, tail = breakline(l, columnwide)
            newlines.append(head)
            while tail and len(tail) > columnwide-wrapindent:
                head, tail = breakline(tail, columnwide-wrapindent)
                newlines.append(" "*wrapindent + head)
            if len(tail):
                newlines.append(" "*wrapindent + tail)

    # second step, figure out where to break the column
    th, tw = os.popen('stty size', 'r').read().split()
    termwide = int(tw)
    cols = int((termwide/columnwide))
    gap = int( (termwide-(cols*columnwide))/(cols-1) )

    # see if we can find a line after the half-way point
    # that begins in the first column. Only break on those lines
    newcol = 0
    for i in range(len(newlines)/2, len(newlines)):
        if newlines[i] and newlines[i][0] != ' ':
            newcol = i
            break

    # third step, start printing
    if newcol:
        for i in range(0, newcol):
            if newcol + i < len(newlines):
                l = newlines[i].ljust(columnwide)
                l += ' '*gap + newlines[newcol+i]
            else:
                l = newlines[i]
            print l
    else:
        for l in newlines:
            print l

class Job(object):
    def __init__(self, jobstr):
        doflags = True
        self.jobstr = ''
        self.flags = ''
        for c in jobstr:
            if doflags: 
                if c in "~*!":
                    self.flags += c
                else:
                    self.jobstr += c
                    doflags = False
            else:
                self.jobstr += c
        self.id = hashlib.md5(self.jobstr.strip()).hexdigest()

    def getLine(self):
        return "%s%s" % (self.flags, self.jobstr)

    def isSleeping(self):
        return '~' in self.flags

    def isStarted(self):
        return '*' in self.flags

    def isPicked(self):
        return '!' in self.flags

    def isInScope(self):
        return args['-a'] or not self.isSleeping()

    def pick(self):
        if '!' not in self.flags:
            self.flags += '!'

    def unpick(self):
        if '!' in self.flags:
            self.flags = self.flags.replace('!', '')

    def start(self):
        if '*' not in self.flags:
            self.flags += '*'

class Project(object):
    def __init__(self, projtag):
        self.projtag = projtag.strip()
        self.jobs = []

    def isInScope(self):
        if args['PROJ']:
            selector = args['PROJ'].lower()
            mytag = self.projtag.lower()
            if self.projtag.startswith('~'):
                return selector in [mytag[1:], mytag] 
            else:
                return selector == mytag
        else:
            return not self.isSleeping() or args['-a']

    def isSleeping(self):
        return self.projtag.startswith('~')

    def tagMatches(self, intag):
        projtag = self.projtag.lower()
        intag = intag.lower()
        return projtag == intag or '~' + projtag == intag

    def addJob(self, jobstr):
        j = Job(jobstr) 
        self.jobs.append(j)
        return j

    def removeJob(self, j):
        if j in p.jobs:
            p.jobs.remove(j)

    def getJobs(self):
        return [j for j in self.jobs if j.isInScope()]

    def getJobByID(self, id):
        hits = []
        for j in self.jobs:
            if j.id.lower().endswith(id.lower()):
                hits.append(j)
        if len(hits) == 1:
            return hits[0]
        elif len(hits) == 0:
            print "No job found matching id '%s'. Aborting." % id
            exit()
        else:
            print "Multiple jobs found matching id '%s'." % id
            print "List jobs again using higher -i value and try again."
            exit()

    def getStartedJobs(self):
        outs = []
        return [j for j in self.jobs if j.isStarted() and j.isInScope()]

    def getPickedJobs(self):
        outs = []
        return [j for j in self.jobs if j.isPicked() and j.isInScope()]

    def getSleepingJobs(self):
        outs = []
        return [j for j in self.jobs if j.isSleeping()]


def GetProjectByTag(intag):
    for p in projects:
        if p.tagMatches(intag):
            return p
    return None

# load all known projects and jobs
proj = None
with open(todo_file, 'r') as fh:
    for l in fh.readlines():
        line = l.strip()
        m = re.match('\[(\S+)\]', line)
        if m:
            proj = Project(m.group(1))
            projects.append(proj)
        elif len(line):
            proj.addJob(line)

if args['projects']:
    if args['-a']:
        print "All projects"
    else:
        print "Current projects"
    for p in projects:
        if p.isInScope():
            print "  %s" % p.projtag

if args['list']:
    count = 0
    lines = []
    for p in projects:
        if p.isInScope():
            count += 1
            lines.append( "%s" % p.projtag)
            scopedJobs = p.getJobs()
            for j in scopedJobs:
                lines.append( "  (%s) %s" % (j.id[-idlen:], j.getLine()))
            diff = len(p.jobs) - len(scopedJobs)
            if diff:
                lines.append( "    %s +%d sleeping tasks" % (" "*idlen, diff) )
            lines.append('')
    diff = len(projects) - count
    if diff:
        lines.append( "+%d sleeping projects" % (diff) )
        lines.append('')
    #for l in lines:
    #    print l
    print_multi(lines, columnwide=40, wrapindent = 5+idlen)


if args['started']:
    count = 0
    for p in projects:
        if p.isInScope():
            jbs = p.getStartedJobs()
            for j in jbs:
                print "%s: (%s) %s"% (p.projtag.rjust(10), j.id[-idlen:], j.getLine())
                count += 1
    if not count:
        print "None".rjust(10)

if args['picked'] or args['today']:
    count = 0
    for p in projects:
        if p.isInScope():
            jbs = p.getPickedJobs()
            for j in jbs:
                print "%s: (%s) %s"% (p.projtag.rjust(10), j.id[-idlen:], j.getLine())
                count += 1
    if not count:
        print "No jobs picked for today."

if args['sleeping']:
    count = 0
    print "Sleeping Tasks:"
    for p in projects:
        if p.isInScope():
            jbs = p.getSleepingJobs()
            for j in jbs:
                print "%s: (%s) %s"% (p.projtag.rjust(10), j.id[-idlen:], j.getLine())
                count += 1
    if not count:
        print "None".rjust(10)
    print
    print "Sleeping Projects:"
    count = 0
    for p in projects:
        if p.isSleeping():
            print "%s"% p.projtag.rjust(10)
            count += 1
    if not count:
        print "None".rjust(10)

if args['stats']:
    jobcount = 0
    startedcount = 0
    sleepingcount = 0
    pickedcount = 0
    print "Projects: %d" % len(projects)
    print "Sleeping Projects: %d" % len([p for p in projects if p.isSleeping()])
    for p in projects:
        jobcount += len(p.jobs)
        for j in p.jobs:
            if j.isSleeping():
                sleepingcount += 1
            if j.isStarted():
                startedcount += 1
            if j.isPicked():
                pickedcount += 1
    print "Total Jobs: %d" % jobcount
    print "Started Jobs: %d" % startedcount
    print "Sleeping Jobs: %d" % sleepingcount
    print "Picked Jobs: %d" % pickedcount

if args['add']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        if len(args['JOBSTRING']) > 0:
            print "Project '%s' doesn't exist." % projtag
            print "Create the project before trying to add jobs to it."
            exit()
        p = Project(projtag)
        projects.append(p)
        datachanged = 1
        print "Project %s created."%projtag
        WriteLog(log_file, projtag, 0, "CREATED")
    if args['JOBSTRING']:
        jstr = ' '.join(args['JOBSTRING'])
        j = p.addJob(jstr)
        datachanged = 1
        print "Job \"%s\" added to project %s."%(j.jobstr, p.projtag)
        WriteLog(log_file, p.projtag, j.id, "CREATED: %s"%j.jobstr)

if args['delete']:
    if not args['-y']:
        print "Deletion cannot be undone, so confirmation is required."
        print "If you really mean it, run the command again with the -y option."
        exit()
    p = GetProjectByTag(args['PROJ'])
    if not p:
        print "No such project exists. Nothing to delete."
        exit()
    if len(args['JOBID']) > 1:
        print "Jobs can only be deleted one at a time."
        exit()
    if len(args['JOBID']) == 0:
        if len(p.jobs) == 0:
            projects.remove(p)
            datachanged = 1
            WriteLog(log_file, p.projtag, 0, "DELETED")
            print "Project %s deleted." % p.projtag
        else:
            print "Project %s has jobs. Only empty projects can be deleted." % p.projtag
    else:
        id = args['JOBID'][0]
        j = p.getJobByID(id)
        if not j:
            print "No such JOBID (%s) in that project. Nothing to delete." % id
            exit()
        p.removeJob(j)
        datachanged = 1
        WriteLog(log_file, p.projtag, j.id, "DELETED")
        print "Job %s deleted from project %s" % (id, p.projtag)

if args['pick']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        print "No such project exists. Nothing to pick."
        exit()
    joblist = []
    for id in args['JOBID']:
        j = p.getJobByID(id)
        if not j:
            print "No job with id %s in that project." % id
            continue
        if j.isPicked():
            print "Job \"%s\" is already picked."%j.jobstr
            continue
        joblist.append(j)
    for j in joblist:
        print "Picking job %s from project %s" % (j.id[-idlen:], p.projtag)
        j.pick()
        datachanged = 1
        WriteLog(log_file, p.projtag, j.id, "PICKED")

if args['unpick']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        print "No such project exists. Nothing to unpick."
        exit()
    joblist = []
    for id in args['JOBID']:
        j = p.getJobByID(id)
        if not j:
            print "No jobwith id %s in that project." % id
            continue
        if not j.isPicked():
            print "Job %s is not picked so it cannot be unpicked."%id
            continue
        joblist.append(j)
    for j in joblist:
        print "Unpicking job %s from project %s" % (j.id[-idlen:], p.projtag)
        j.unpick()
        datachanged = 1
        WriteLog(log_file, p.projtag, j.id, "UNPICKED")

if args['start']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        print "No such project exists. Nothing to start."
        exit()
    joblist = []
    for id in args['JOBID']:
        j = p.getJobByID(id)
        if not j:
            print "No job with id %s in that project." % id
            continue
        if j.isStarted():
            print "Job %s is already started."%id
            continue
        joblist.append(j)
    for j in joblist:
        print "Starting job %s from project %s" % (j.id[-idlen:], p.projtag)
        j.start()
        datachanged = 1
        WriteLog(log_file, p.projtag, j.id, "STARTED")

if args['finish']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        print "No such project exists. Nothing to finish."
        exit()
    joblist = []
    for id in args['JOBID']:
        j = p.getJobByID(id)
        if not j:
            print "No job with id %s in that project." % id
            continue
        if not j.isStarted():
            mention("That job wasn't started. Marking it started and finished.")
            WriteLog(log_file, p.projtag, j.id, "STARTED")
        joblist.append(j)
    for j in joblist:
        print("Job %s from project %s logged as finished." % (j.id[-idlen:], projtag))
        WriteLog(log_file, p.projtag, j.id, "FINISHED")
        p.removeJob(j)
        datachanged = 1

if args['log']:
    projtag = args['PROJ']
    p = GetProjectByTag(projtag)
    if not p:
        print "Looks like you forgot to specify the PROJ tag."
        print "No log entry added."
        exit()
    if len(args['JOBID']) == 0:
        print "No job id given, so there's nowhere to put the log entry."
        exit()
    id = args['JOBID'][0]
    j = p.getJobByID(id)
    if len(args['MESSAGE']) == 0:
        print "No message provided to enter into log."
        exit()
    logstr = ' '.join(args['MESSAGE'])
    WriteLog(log_file, p.projtag, j.id, "LOG: %s" % logstr)
    datachanged = 0  # log entries do not modify the job file
    print "Note logged to job %s %s." % (p.projtag, id)

# This should be the last thing
if args['-d']:
    for p in projects:
        print "[%s]" % p.projtag
        for j in p.jobs:
            print j.getLine()
        print
elif datachanged:
    with open(todo_file, 'w') as fh:
        for p in projects:
            fh.write("[%s]\n" % p.projtag)
            for j in p.jobs:
                fh.write("%s\n" % j.getLine())
            fh.write("\n")
    mention("Database updated.")
else:
    mention("Database unchanged.")
